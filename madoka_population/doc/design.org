* Madoka Population Simulation
Models the population dynamics of witches and magical girls in Puella Magi Madoka Magica. The idea is to find out how many magical girls are necessary to maintain the cycle of magical girl -> witch -> grief seed to purify other magical girls’ soul gems.

** Top-level

Copy Rich Hickey’s ants demo. The magical girls are all agents that run a “behave” function similar to the ants in the ants demo. 

For simplicity go back to a square grid world and just copy Rich Hickey’s design with the square grid in a vector of vectors holding on to magical girl and witch values inside refs. We can numerically calculate whether they’re in each others discovery radii by just checking if any squares are shared between the two radii (which won’t be circular anymore, they’ll be square. Not rectangular, too much of a pain. Square, period). Have a lazy-seq (or something) of magical girl agents that hold their current location. As before, after +three moves+ 24ms, the magical girls will return to their home square to simulate “days”. 

So rather than the self-queuing infinitely looping function of the ant demo, maybe we actually want something else (a future, a self-queuing function on agent, a Java thread, something) that runs independently, sends off the behavior function to the magical girls, times 24ms, then sends them home by switching some value in an atom. Every time the magical girls execute a move, they check this value first and if it’s switched, they return home and stop executing. Something like:

    #+BEGIN_SRC clojure
      (def stop-hunt (atom false))
      
      (defn hunt-witches
        [location]
        (let [magical-girl (girl-at location)]
          (if @stop-hunt
            (move magical-girl (:home magical-girl)))
            ;; Go hunt witches
             (send-off *agent* hunt-witches magical-girl)))
      
       (defn do-day
         []
         (do
           (swap! stop-hunt not)
           (map
            #(send-off % hunt-witches) magical-girls)
           (Thread/sleep 24)
           (swap! stop-hunt not)
           (recur)))
           
      (let [runner (java.util.Thread. do-day)]
        (.start runner))
    #+END_SRC

The =hunt-witches= function will also contain some part where we sample a random exponential distribution with mean 12 and wait that number of milliseconds before going witch hunting again. 

Note: here are two ways to do an infinitely looping thread in Clojure:

    #+BEGIN_SRC clojure
      ;; With a Java thread set to daemon so it won't inhibit exit.
      (doto (java.util.Thread. fn-to-execute)
        (.setDaemon true)
        (.start))
      
      ;; With futures, in pure Clojure
      (defn infinite-loop
        [fn-to-execute]
        (future
          (loop []
            (fn-to-execute)
            (Thread/sleep sleep-time)
            (recur))))
      
      (infinite-loop some-fn)
      
      ;; You can stop the futures version:
      (def stop (atom false))
      
      (defn infinite-loop
        [fn-to-execute]
        (future
          (loop []
            (fn-to-execute)
            (Thread/sleep sleep-time)
            (when (not @stop)
              (recur)))))
    #+END_SRC

*** Time

+Discrete-time+. Each day, a magical girl finds a witch, finds a familiar, or finds nothing. If she finds a witch, she can defeat the witch and gain a grief seed to purify her soul gem, at the cost of magic use and possible death. If she finds a familiar, she can choose to fight it, at the cost of soul gem impurities and possible death, or to ignore it, at the cost of a small amount of soul gem impurity. If she finds nothing, her soul gem becomes a little more corrupt from the energy she expended.

Now I’m thinking I might hazard continuous time. Of course, continuous time isn’t really continuous; it’s discrete with small enough delays that it appears continuous to a human observer. 

Given that, the best thing is probably to have a “do turn” function that does an entire turn, but has no dependence at all on time. We can then run it in Quil at some framerate, and it will appear continuous,  I guess, kind of. 

Another way: rather than having a single “do turn” that does a turn for everyone, we could have something like an agent that does turns for some randomly chosen magical girls at random intervals.

The exponential distribution models the time between occurrences of events whose probability of occurring is a Poisson, so we can just say witch hunts are Poisson-distributed and have magical girls wait an amount modeled by an exponential, with mean 24ms (we’ll say 1ms = 1hr, so 24ms = 1 day). 

+Have a core.async channel that dispenses waiting times, exponentially distributed with mean 24.+ Each magical girl is a thread (of some kind—future, agent, something) that generates a number, exponentially distributed with mean 24, and waits for that many milliseconds, then goes on a witch hunt. She gets her three moves and can fight or fly from any familiars encountered during that time.

Meanwhile, the Incubators also have wait times before they can spawn a magical girl, to simulate the process of finding a suitable candidate for magical girl status.
*** Space

+Takes place on a grid. Just a big, empty grid, I think. Maybe grid spaces have “witch hospitability” values that determine how likely a witch is to take up residence there. In The Different Story there was a labyrinth with two witches inside so witches can live on the same square. Magical girls can cover the nearest twenty-square radius and return to a home square at the start of every day. Each day, the magical girl will randomly search this radius for witches. If a square is within a witch’s discovery radius, a random number is generated which serves as a discovery threshold. If the magical girl’s witch seeking power is greater than the threshold, she will discover the witch. If a square contains a witch, the magical girl finds it regardless of her witch seeking stat. Familiars are always found but do not need to be fought.+

I’m changing this from a grid with discrete squares to a continuous space. The coordinates are floating point numbers. (If this were C or Java I would probably use floats instead of doubles, since we don’t really need that precise a resolution.) The discovery radius is a literal radius that defines a circle. Magical girls also have discovery radii which are divided into five rings. 

Each turn, we check if the discovery radii of magical girls overlap with those of witches or familiars. The magical girl’s discovery radius is divided into five rings. If a witch’s discovery ring intersects the magical girl’s first ring, the witch will be discovered 100% of the time. If the witch’s discovery ring intersects at the second ring, it will be discovered 50% of the time. The third ring, 25%, the fourth ring, 14.5%, the fifth ring, 7.25%. The magical girl’s discovery stat determines the size of her discovery radius.

If the magical girl doesn’t find a witch within her discovery radius, she can choose to move to the extent of her third ring (i.e. 3/5ths of the way along her discovery radius) in any direction. +The direction is chosen randomly+. Good thing I watched Episode 2 again; the soul gem reacts to the proximity of a witch, so the magical girls can actually figure out which direction the witch is. We can use the quadtree to find a witch in the same quadrant; as an approximation, just the first one we find in the same quadrant, not actually the nearest one in total distance. But the tracking stat is still relevant, because a higher tracking stat means the discovery radius is larger, which means witches can be found from further away, and also that the inner rings will intersect the witch’s from further away, so the probability of finding a witch is higher. Magical girls can move three times before having to return home. 

I’m going to attempt to implement the discovery check with a quadtree that contains all the magical girls and witches. Witches don’t move so we won’t ever need to update the tree on their account.

Say we have a big list of all the entities (witches, magical girls, familiars—we can ignore Incubators) in the simulation right now. Then we determine the geometric midpoint of the world map along both axes. Then we need to partition the list into four areas according to which quadrant the entity falls inside. The list can be partitioned like in quicksort, only more complex since there are four regions.
*** Combat

If a magical girl discovers a witch, she must fight. The outcome of combat is determined like so:

  - Take the combat differential, magical_girl.combat - witch.combat.
  - Draw a random sample from a normal distribution with mean 0
    and standard deviation abs val of the the combat differential.
  - If the random value we drew is within one standard deviation of the
    mean on either side (i.e. in the range [-combat differential, +cd])
    or within two standard deviations in the direction of the
    differential’s sign (i.e. [-2sigma, sigma] if sigma is negative)
    then the stronger party wins.
  - If the random value is outside of this range in the direction of the combat differential’s sign, the side with the smaller combat stat wins.
  - If the combat differential is less than the magical girl’s total
    combat stat, the magical girl can choose to run away. She will do
    so according to the outcome of a random coin toss whenever this
    condition is true.
  - If the combat differential is zero, the outcome of combat is determined
    by a random coin toss.

e.g. Say we have a magical girl Sayaka with combat 50, and a witch with combat 130. The combat differential is -80. Sayaka cannot run because the difference between their combat stats is higher than her combat stat.

We take a random sample from a population which is normally distributed with mean 0 and standard deviation 80. Say we get -74.65 (rounded, drawn from a real run of Python’s random.normalvariate). Then the witch wins, because the combat differential is negative and -74.65 is within the range [-160, 80]. On the other hand, if we drew -172.77 (another real value), Sayaka wins because this value is smaller than -160.

If the magical girl wins, her soul gem is purified. If she loses, she dies. If she runs, her soul gem is corrupted.

I hope that this system will allow the stronger party to win most of the time, while also allowing the weaker party to win a fair amount of the time, with that amount increasing as the gap in power shrinks.

** Entities
*** Witches

Much simpler than magical girls, they have just a combat stat and a discoverability stat. More powerful witches are easier to find because they have larger labyrinths and create more dramatic effects (e.g. the giant storm that Walpurgisnacht caused). More powerful witches also create more familiars.

  - Combat: A real number greater than 0. 
  - Discoverability: An integer which gives the Manhattan distance
    from which a witch can be discovered by a magical girl. 
    Determined when a witch is born from the original magical girl’s
    tracking stat and the witch’s combat stat. (The logistic or sigmoid
    of the combat stat times the tracking stat.)
  - Location: The square where the witch sets up its labyrinth. 
    Whichever square a magical girl is on when her soul gem
    turns black is the square the witch starts in.

At the time of a witch’s birth, it spawns a random number of familiars between 0 and its combat stat. The familiars are randomly spread over the witch’s discovery radius. Their combat stats are 1/10th the witch’s.

*** Magical girls

  - Combat: A real number greater than 0.
  - Tracking: +A real number between 0 and 1. When a magical girl enters a witch’s discovery radius, a random number between 0 and 1 is generated. If the magical girl’s tracking stat is higher than this number, she discovers the witch. Every time a witch is defeated, the magical girl gains more tracking ability; the exact amount is determined by an exponential distribution with mean 0.05.+ Now just a real number greater than 0, which determines the size of the magical girl’s discovery radius. 
  - Soul gem: A real number between 0 and 1. The percentage of black in the magical girl’s soul gem. Increases every day by a base rate between 0.01 and 0.1 which is randomly determined at the birth of a magical girl (meant to mimic her natural resilience of personality). Combat with a familiar increases it by the base rate times 1.5; combat with a witch increases it by the base rate times 5. Defeating witches yields grief seeds, which reduce the soul gem’s corruption to zero.
  - Home square: A two-tuple for the magical girl’s home square. 
 
*** Familiars

  - Combat: A real number greater than 0.

*** Incubators

The simulation starts with some number of Incubators randomly spread across the grid. Incubators will move to a random square +at random intervals (determined by an exponential distribution)+ [Incubators have no reason to limit the number of magical girls they create; if some can’t survive, it just means more witches, so let it rip. So Incubators try to create a new magical girl every turn] and try to spawn a magical girl. They will succeed with probability p. The number of Incubators and the success probability of their attempts are parameters to the simulation. (Now changed to the mean probability of the Incubators’ success, because, really, who wants to type in a bunch of doubles, right? Better to just give up a little control and let it be somewhat random.)

Incubators are essentially ignored by the other actors in the simulation. 

  - Success: A number between 0 and 1 which indicates the likelihood of
    the Incubator succeeding at creating a magical girl. 
** Input format
   A file containing a Clojure map, which will be read in as
   EDN. Should be a map from symbols to keys (not keywords). Later we
   can also support keywords if it’s useful because I have a function
   to convert keywords to symbols.

   See config_schema.edn under resources for an example with all the
   currently allowed keys.
** Problems [updated as we go]
*** Entity problems
1. Sayaka runs away from Gertrud too much. About half the time. That makes sense since the ratio of her and Gertrud's combat differential and her combat stat is about 0.5, so about half the time the random number should be below the threshold, and about half the time it should be above. That’s about the only damn thing here that does make sense.
2. Sayaka also beats Gertrud way too much. Gertrud is stronger, but practically never wins. I would think the combat info function is somehow fucked and is getting the wrong person for stronger and weaker, except it passes all its unit tests. So I probably fucked up the system for determining the winner, probably due to my total idiocy at statistics and lack of knowledge about the normal distribution. 
3. Sayaka also wins ridiculously often against Kriemhild Gretchen; she should practically never win, ever, but she consistently wins 85% of the battles.
4. Ultimate Madoka loses to Kriemhild Gretchen way too much. She only wins about 12% of the time, with Gretchen winning about 88% of the time.

So the weaker person is way too favored by this system (unless there /is/ something fucked up in how we’re choosing the stronger and weaker combatant), and running away happens way too often. 

Chinsy solutions:
1. Just multiply the combat by 2 so the flight threshold becomes smaller.
2. Come up with a new way to do combat. Read about some probability distributions and stuff. First try just messing with the victory interval.

*** Graphical display problems
Lots of hiccuping and freezing as the number of entities on screen grows. My guess is agent overhead. 1 dot works pretty well, three sort of works, but as soon as you get to five, everything is all screwed up.

I have no idea how Rich Hickey’s ants demo deals with this. Maybe a weakness in Quil? Maybe I can get around it by using the OpenGL rendering mode?

For now going to just add witches, and then recode the whole thing to use sequential code instead of agents and proceed with Quil’s frame rate. Maybe use coarser-grained parallelism (e.g. one thread pool working across a list, like pmap or something, instead of each entity being an agent on its own.) Brian Carper had problems with agent performance too, when he tried to make every entity in his RPG game its own agent.
*** add-vars-to-ns macro problems
The first version

    #+BEGIN_SRC clojure
      (defmacro add-vars-to-ns
        [binding-map]
        `(do ~@(map #(list 'def (first %) (second %)) binding-map)))
    #+END_SRC

Worked great with literal maps. Didn’t work with maps stored in vars, because =binding-map= is never actually evaluated, which is fine if it refers to a literal map because it will be replaced with that map in the macroexpansion, but if it refers to a var that refers to a map, it doesn’t work because it just gets replaced with that literal symbol.

#+NAME: The second version, or, So evaluate binding-map, then
#+begin_src clojure
  (defmacro add-vars-to-ns
    [binding-map]
    `(do ~@(map #(list 'def (first %) (second %)) ~binding-map)))
#+end_src

Doesn’t work because you can’t use unquote inside a ~@ form; it has to be directly inside a quoted form, at no level of nesting. 

#+name: The third version, or, So quote the form, then
#+begin_src clojure
  (defmacro add-vars-to-ns
    [binding-map]
    `(do ~@`(map #(list 'def (first %) (second %)) ~binding-map)))  
#+end_src

Doesn’t work because it expands to this:

#+begin_src clojure
  (do map #(list def (first %) (second %)) config)
#+end_src

assuming that you passed =config= as the argument. I.e. it doesn’t evaluate the map form, it splices all of the map form’s top-level symbols into the =do=. Just like we asked for.

The main problem here was that we needed =binding-map= to already be evaluated in order to use it inside the syntax-quoted form, but there wasn’t any good time to evaluate it because the only time it appeared in the body was in the =map= form. We couldn’t evaluate it there because that form was being spliced into a =do=.

Hence this version.

#+name: The one with a let
#+begin_src clojure
  (defmacro add-vars-to-ns
    [binding-map]
    `(let [m# ~binding-map]
       (do ~@(map #(list 'def (first %) (second %)) m#))))
#+end_src

This was no good because...well, I’ll let the compiler speak for itself:

=CompilerException java.lang.RuntimeException: Unable to resolve symbol: m# in this context, compiling:(/tmp/form-init7952595777459953677.clj:1:42)=

A slight modification of this /almost/ worked.

#+name: Got the correct form, but it isn’t evaluated
#+begin_src clojure
  (defmacro add-vars-to-ns
    [binding-map]
    `(let [m# ~binding-map]
       `(do ~@(map #(list 'def (first %) (second %)) m#))))
#+end_src

This returns =(do (def a 1) (def b 2))=, assuming you passed some symbol that contains a map ={a 1, b 2}=. Unfortunately I have no idea how to make it evaluate the form without doing something that screws up something else. If I just remove the backtick on the =do= form, I can’t use =~@= inside it. If I try to /only/ quote the =do= form, I can’t evaluate the binding map inside the =let=. 

I also tried a few different versions with a function that returned the correct form, hoping that would help by evaluating the binding map for me when the function was called. It didn’t help.

#+name: Version with function
#+begin_src clojure
  (defn pairs-to-def
    [m]
    (map #(list 'def (first %) (second %)) m))
  
  (defmacro add-vars-to-ns
    [binding-map]
    (let [p# `(pairs-to-def ~m)] p#))
  ;; Returns a list of the correct bindings
  
  (defmacro add-vars-to-ns
    [m]
    (let [p# `(pairs-to-def ~m)] `(do ~@p#)))
  ;; Gets the unevaluated form spliced in again
#+end_src

I finally realized that if I was getting the correct form, and I could eval that form outside the macro to get what I wanted, I could also eval the form inside the macro.

#+name: The really complicated but working version with eval
#+begin_src clojure
  (defmacro add2
      [binding-map]
      `(let [m# ~binding-map]
         (eval `(do ~@(map #(list 'def (first %) (second %)) m#)))))
#+end_src

And that works, but geez, look at that horrible thing. Nested syntax quotes, especially.

You can actually shorten it up a little and get rid of the nested syntax quotes like this:

#+name Eval just the binding map
#+begin_src clojure
  (defmacro add-vars-to-ns
    [binding-map]
    `(do ~@(map #(list 'def (first %) (second %)) (eval binding-map))))
#+end_src

And you can actually make it work with literal maps, provided you use keywords as the keys instead of symbols, or write something that can convert any of keywords, strings, or symbols into symbols.

#+name: with keywords
#+begin_src clojure
  (def keyword->symbol
    (comp symbol #(subs % 1) str))
  
  (defn convert-to-symbol
    [key]
    (condp = (type key)
      clojure.lang.Keyword (keyword->symbol key)
      clojure.lang.Symbol key
      java.lang.String (symbol key)))
  
  (defmacro add-vars-to-ns
    [binding-map]
    `(do ~@(map #(list 'def (convert-to-symbol (first %)) (second %))
                (eval binding-map))))
#+end_src

This version still doesn’t work with literal maps that have symbols for keys unless you quote the input map.

Except it fucking doesn’t work outside the REPL.

=Caused by: java.lang.UnsupportedOperationException: Can't eval locals
	at clojure.lang.Compiler$LocalBindingExpr.eval(Compiler.java:5724)
	at clojure.lang.Compiler.eval(Compiler.java:6708)
	at clojure.lang.Compiler.eval(Compiler.java:6666)
	at clojure.core$eval.invoke(core.clj:2927)
	at madoka_population.state$add_vars_to_ns.invoke(state.clj:33)
	at clojure.lang.Var.invoke(Var.java:388)
	at clojure.lang.AFn.applyToHelper(AFn.java:160)
	at clojure.lang.Var.applyTo(Var.java:700)
	at clojure.lang.Compiler.macroexpand1(Compiler.java:6552)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6630)=

Why in God’s name it works /in/ the REPL, I can’t fathom. But it doesn’t work outside the REPL, so it’s worthless.

(It works in the REPL because I wasn’t actually evaling locals in the REPL; I was evaling a namespace-level var, which is fine at compile time because namespace-level vars are determined at compile time; and I was evaling literal maps, which was fine because literal maps are also available at compile time. In core.clj, I was trying to use it on a local variable of the function where it was called, defined in a =let=. Basically, it’s not that you can’t eval locals, it’s that you can’t eval anything that isn’t known at compile time inside a macro, because macros are expanded at compile time. It also fails if I try to just pass a value straight in, because that value isn’t known until runtime. But the error message is different because the compiler doesn’t actually realize that’s the problem unless it can see some kind of binding form around where the macro is expanded.)

Here’s another failed attempt:

#+name: The failed version with for
#+begin_src clojure
  (defmacro add [m]
    (cons 'do 
          (for [pair m]
            `(def ~(first pair) ~(second pair)))))
#+end_src

It fails for exactly the same reason, because it’s exactly the same code, except with =for= instead of =map=.

I have come to a philosophical understanding of why this venture was doomed to failure. Essentially, macros add code at compile time. They revolve around compile time and things which can be determined at compile time.

What this macro is supposed to do, though, involves data which is only available at runtime. The whole problem appears because I need to evaluate the =m= symbol, but it evaluates to the =config= symbol when I pass in =config=. But =config= needs to be evaluated in turn to get the actual map. However, the actual map exists only at runtime, because it’s been read in from the file and stored in the =config= symbol. In other words, you I got my runtime in the macro system’s compile time, and it’s not happy.

Despite Paul Graham’s usual witticisms about eval being stupid, that’s probably the only way to get this to work the way I want. (I always knew there was a reason why I wasn’t a fan of Paul Graham.)

So this is the way to get it to work using =eval=.

#+name: the one with eval that probably works, hopefully.
#+begin_src clojure
  (defn add-vars-to-ns
    [binding-map]
    (eval
     (cons 'do
           (map
            #(list 'def (convert-to-symbol (first %)) (second %))
            binding-map))))
#+end_src

It does work in the REPL. I will presently try it out in the real code and run =lein test=, but not now.

The whole state namespace has been just a nightmare. I added a macro =symbols-interned?= that checks whether a particular symbol is interned in the current namespace. It turns out the built-in function =resolve= does this, so here’s a simpler version of that macro.

#+name: version of symbols-interned? with resolve
#+begin_src clojure
  (defmacro symbols-interned?
    [& symbols]
    `(and ~@(map resolve symbols)))
#+end_src

The nightmare continued. The function with eval version also worked in the REPL, but barfed in the actual application. The commit message and the version of this doc from that branch says more, but essentially, I gave up and replaced the whole stupid thing with a closure around the config map so I would have a no-arg function to give to Quil as its setup function. I had to call the Quil setup stuff for the frame rate and all that inside it too, but I wanted to be able to test the returned map, and I couldn’t call the function without being in a Quil context, so I added a =testing= parameter that’s =false= by default and can be set to true and not run the Quil stuff when it’s true. 

*** Problems with combat-result
;; I'm not really sure what will happen when more than one magical
;; girl is capable of engaging a given witch in battle in a given
;; turn. Since Kriemhild-Gretchen has one billion discoverability,
;; everyone is able to fight her on this turn.

That was the comment I wrote above test-combat-results in events_test.clj, and it turned out that what happened is, when I wrote “every possible battle” in the docstring, it meant that in a much freer sense than I knew. 

If two magical girls overlap the same witch’s radius, both magical girls will fight the witch, and it’s possible that both will kill it. That’s a problem.

If two witches overlap the same magical girl’s radius, it’s possible that both witches will kill that magical girl. That’s less of a problem since there is no apportionment of grief seeds to worry about.

I guess it would be okay if the magical girl killed two witches at once, but the problem comes when she loses one battle; as things are currently written, she’ll be both alive and dead at the same time. I guess I could just do =(set/difference the-victors the-dead)= so that a magical girl who loses any of several battles in which she takes part is dead. 

#+begin_src clojure
(binding [events/random-source (Random. 23)] (events/combat-results mgs ws))
{:the-dead #{nil #madoka_population.entities.Witch{:combat 75, :discoverability 15, :position [50 50]}}, :the-victors #{#madoka_population.entities.MagicalGirl{:combat 100, :tracking 15.0, :soul-gem 0, :corruption-rate 0, :home [0 0], :position [35 35]}}, :the-fled #{#madoka_population.entities.MagicalGirl{:combat 100, :tracking 15.0, :soul-gem 0, :corruption-rate 0, :home [0 0], :position [35 35]}}}
#+end_src

This is how I’m going to attempt to resolve this issue.

In the Madoka anime and manga spinoffs, the magical girls are able to be pretty selective about which witches they fight. They have to enter the witch’s labyrinth before the fight begins. So assuming a magical girl were aware of two witches in a close area (i.e. her discovery radius overlapped with two witches), she would be able to fight one, come back tomorrow, and fight the other one. 

So rather than making any possible fight happen, what I’ll do is pair up each magical girl with a list of witches within her range. Then she can apply some kind of policy function to choose which one to fight this turn. Then I’ll return a list of all those pairs of magical girl and the witch she’s chosen to fight. 

This still leaves the problem of two magical girls choosing to fight the same witch. In the anime they could do that, but grief seeds can’t be shared so it had to be a long-term cooperative thing where they would award the grief seed to whoever was most in need of it. I guess this could be handled in two ways:

1. Just filter the list and disallow multiple magical girls to fight the same witch. Consider that whoever appears earlier in the list got there first (or resolve conflicts by combat strength, or tracking ability, or something else).
2. Allow them both to fight the witch. Award the grief seed to whoever’s soul gem is more corrupted.

To be maximally realistic we would have to do both of these things at different times, randomly. I’m not going to do that. Even Option (2) sounds like too much work because we have to run the fight against both magical girls, or do something weird like make a temporary composite magical girl with both girls’ strength combined, then when the magical girls win, we have to figure out whose soul gem is blacker and put only her on the victors set, but then we have to somehow throw out the other girl because she isn’t dead presumably (unless the fight can end with only one girl living, which is an even bigger pain to implement), but she isn’t a victor and she didn’t run away (I guess as hack we could shove the other girl in the fled list so her soul gem still blackens but she isn’t dead). 

Option (1) it is!
